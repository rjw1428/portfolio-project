{"version":3,"sources":["images/header-img1.jpg","components/header/Header.js","components/ProjectIndicator/ProjectIndicator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","interval","intervalDelay","letters","phrases","offsetChar","Array","apply","length","map","val","i","String","fromCodePoint","toLowerCase","concat","state","count","maxWordLength","phrase","split","word","reduce","acc","curr","maxRowLength","width","updateWindowDimensions","bind","window","addEventListener","this","setInterval","c","setState","clearInterval","removeEventListener","rows","dials","words","row","key","className","createRow","colLength","offset","Math","floor","spacer","join","dial","letter","id","style","setOffset","ref","dial0","createDial","dialNum","toString","toUpperCase","findIndex","staticOffest","top","getOffset","innerWidth","backgroundImage","backgroundImg","createDials","Component","projectIndicator","onClick","location","assign","link","name","App","document","title","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00e36f2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header-img1.873e4e9f.jpg\";","import React, {Component} from 'react';\r\nimport './Header.css';\r\nimport backgroundImg from '../../images/header-img1.jpg';\r\n\r\nclass Header extends Component {\r\n    interval = null\r\n    intervalDelay = 5 //seconds\r\n    letters = []\r\n    phrases = [\"Senior Developer\", \"Entrepreneur\", \"Mechanical Engineer\", \"Naval Architect\", \"Life Learner\"]\r\n    offsetChar = \" \"\r\n    constructor(props) {\r\n        super(props)\r\n        this.letters = Array.apply(null, {length: 26}).map((val,i)=>String.fromCodePoint(i+65).toLowerCase()).concat([\" \"])\r\n        this.state = {\r\n            count: 1,\r\n            maxWordLength: this.phrases.map(phrase=>phrase.split(\" \").map(word=>word.length).reduce((acc,curr)=>acc<curr?curr:acc)).reduce((acc,curr)=>acc<curr?curr:acc),\r\n            maxRowLength: this.phrases.map(phrase=>phrase.split(\" \").length).reduce((acc,curr)=>acc<curr?curr:acc),\r\n            width: 1000\r\n        }\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        this.interval = setInterval(() => {\r\n            const c = this.state.count % this.phrases.length\r\n            this.setState({\r\n                count: c + 1,\r\n            })\r\n        }, 1000 * this.intervalDelay)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n        window.removeEventListener('resize', this.updateWindowDimensions)\r\n    }\r\n\r\n    createDials(phrase) {\r\n        let rows = Array.apply(null, {length: this.state.maxRowLength}).map((val,i)=>i)\r\n        let dials = Array.apply(null, {length: this.state.maxWordLength}).map((val,i)=>i)\r\n        let words = phrase.split(\" \")\r\n        return rows.map((row, i)=>{\r\n            return (\r\n                <div key={\"word\"+i} className=\"letter-ticker\">\r\n                    {this.createRow(words[i]?words[i]:\" \", dials)}\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    createRow(word, colLength) {\r\n        let offset = Math.floor((colLength.length - word.length)/2)\r\n        let spacer = Array.apply(null, {length: offset}).map(val=>this.offsetChar).join(\"\")\r\n        word=spacer+word+spacer\r\n        if ((colLength.length - word.length)/2>0)\r\n            word=this.offsetChar+word\r\n        \r\n        return colLength.map((dial,i)=>{\r\n            let letter = word[i]?word[i]:this.offsetChar\r\n            return (\r\n                <div className=\"letter\" \r\n                    key={i} \r\n                    id={\"dial\" + i} \r\n                    style={{...this.setOffset(letter)}}\r\n                    ref={this.dial0}>\r\n                    {this.createDial(i)}\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    createDial(dialNum) {\r\n        return this\r\n            .letters\r\n            .map((val, i) => {\r\n                return <div key={dialNum.toString() + i.toString()} id={\"dial\" + dialNum}>\r\n                    {val.toUpperCase()}\r\n                </div>\r\n            })\r\n    }\r\n\r\n    getOffset(letter) {\r\n        return this.letters.findIndex(val => val === letter.toLowerCase())\r\n    }\r\n\r\n    setOffset(letter) {\r\n        let staticOffest=this.state.width>768?8:4\r\n        return {\r\n            top: \"calc(-\" + this.getOffset(letter) + \"em - \"+staticOffest+\"px )\"\r\n        }\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth });\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header-wrapper keyword\" style={{backgroundImage: 'url('+backgroundImg+')'}}>\r\n                <div >\r\n                    {this.createDials(this.phrases[this.state.count - 1])}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport './ProjectIndicator.css'\r\n\r\nconst projectIndicator = (props) => (\r\n    <div className=\"project-wrapper\">\r\n        <h2 onClick={()=> window.location.assign(props.link)}>{props.name}</h2>\r\n    </div> \r\n) \r\n\r\nexport default projectIndicator","import React from 'react';\nimport './App.css';\nimport Header from './components/header/Header'\nimport ProjectIndicator from './components/ProjectIndicator/ProjectIndicator';\n\nfunction App() {\n  document.title = \"Ryan's Portfolio\"\n  return (\n    <div className=\"App\">\n      <div className=\"background-wrapper\">\n        <div className=\"background\"></div>\n      </div>\n      <div className=\"container\">\n        <div className=\"content-wrapper\">\n          <Header />\n          <div className=\"projects\">\n            <ProjectIndicator className=\"item1\" name=\"Brody's Burgers\" link=\"https://brodysburgersandbeer.com/\"/>\n            <ProjectIndicator className=\"item2\" name=\"Alpine Knives\" link=\"https://alpineknives.com\"/>\n            <ProjectIndicator className=\"item3\" name=\"SSR Digital Displays\" link=\"https://ssrdigitaldisplays.com/display/restfest/2\"/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}